name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      version:
        description: 'Version/Tag to deploy'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup deployment variables
      run: |
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "DEPLOY_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
          echo "DEPLOY_PATH=${{ secrets.STAGING_DEPLOY_PATH }}" >> $GITHUB_ENV
          echo "DEPLOY_PORT=${{ secrets.STAGING_PORT }}" >> $GITHUB_ENV
        else
          echo "DEPLOY_HOST=${{ secrets.HOST }}" >> $GITHUB_ENV
          echo "DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}" >> $GITHUB_ENV
          echo "DEPLOY_PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
        fi

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.DEPLOY_HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ env.DEPLOY_PORT || 22 }}
        script: |
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color
          
          echo -e "${YELLOW}🚀 Starting deployment...${NC}"
          
          # Navigate to project directory
          cd ${{ env.DEPLOY_PATH }}
          
          # Backup current version
          echo -e "${YELLOW}📦 Creating backup...${NC}"
          docker-compose exec -T db mysqldump -u haslaw_user -p${{ secrets.DB_PASSWORD }} haslaw_db > backup_$(date +%Y%m%d_%H%M%S).sql
          
          # Pull latest changes
          echo -e "${YELLOW}📥 Pulling latest changes...${NC}"
          git pull origin main
          
          # Login to GitHub Container Registry
          echo -e "${YELLOW}🔐 Logging in to registry...${NC}"
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Update docker-compose with specific version if provided
          if [ "${{ github.event.inputs.version }}" != "latest" ]; then
            sed -i "s|ghcr.io/${{ github.repository }}:latest|ghcr.io/${{ github.repository }}:${{ github.event.inputs.version }}|g" docker-compose.yml
          fi
          
          # Pull and restart services
          echo -e "${YELLOW}🐳 Updating containers...${NC}"
          docker-compose pull app
          docker-compose up -d --no-deps app
          
          # Wait for service to be ready
          echo -e "${YELLOW}⏳ Waiting for service to be ready...${NC}"
          sleep 15
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo -e "${GREEN}✅ Health check passed!${NC}"
              break
            else
              if [ $i -eq 5 ]; then
                echo -e "${RED}❌ Health check failed after 5 attempts${NC}"
                # Rollback
                echo -e "${YELLOW}🔄 Rolling back...${NC}"
                docker-compose down
                docker-compose up -d
                exit 1
              fi
              echo -e "${YELLOW}⏳ Health check attempt $i failed, retrying...${NC}"
              sleep 10
            fi
          done
          
          # Clean up
          echo -e "${YELLOW}🧹 Cleaning up...${NC}"
          docker image prune -f
          
          echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
